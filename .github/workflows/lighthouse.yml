name: Vercel Preview Lighthouse Audit

permissions:
  pull-requests: write
  checks: read
  contents: read
  deployments: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true # for further

on:
  pull_request:
    types: [synchronize, opened]

jobs:
  generate_lighthouse_audit:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Wait for the Vercel deployment
        uses: patrickedqvist/wait-for-vercel-preview@v1.3.1
        id: wait_for_deployment
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment: Preview
          max_timeout: 1200

      - name: Add comment to PR
        id: loading_comment_to_pr
        uses: marocchino/sticky-pull-request-comment@v2.9.0
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          number: ${{ github.event.pull_request.number }}
          header: lighthouse
          message: |
            Running Lighthouse audit...

      - name: Audit preview build with Lighthouse
        id: lighthouse_audit
        uses: treosh/lighthouse-ci-action@v11
        env:
          LHCI_BUILD_CONTEXT__CURRENT_HASH: ${{ github.sha }}
        with:
          urls: |
            ${{ steps.wait_for_deployment.outputs.url }}
          runs: 3 # running 3 times for consistency
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Extract and format Lighthouse details
        id: format_lighthouse_details
        run: |
          # Load the detailed JSON report
          REPORT_PATH=$(find .lighthouseci -name "*.report.json" | head -n 1)
          HTML_REPORT_PATH=$(find .lighthouseci -name "*.report.html" | head -n 1)
          if [ -f "$REPORT_PATH" ]; then
            REPORT_CONTENT=$(cat "$REPORT_PATH")

            # Extract scores
            ACCESSIBILITY_SCORE=$(echo "$REPORT_CONTENT" | jq -r '.categories.accessibility.score * 100 | floor')

            # Assign colors based on score thresholds
            ACCESSIBILITY_COLOR=$(if [ $ACCESSIBILITY_SCORE -ge 90 ]; then echo "üü¢"; elif [ $ACCESSIBILITY_SCORE -ge 50 ]; then echo "üü†"; else echo "üî¥"; fi)

            # Determine whether to include detailed audits
            if [ "$ACCESSIBILITY_SCORE" -eq 100 ]; then
              FAILING_AUDITS="**üéâ You're all set! No accessibility issues found!**"
            else
              FAILING_AUDITS=$(echo "$REPORT_CONTENT" | jq -r '
                .audits 
                | to_entries 
                | map(
                    select(
                      .value.score != 1 and 
                      .value.details and 
                      .value.details.items
                    ) 
                    | select(
                        .value.details.items 
                        | map(.node.snippet // "No element data") 
                        | map(select(. != "No element data")) 
                        | length > 0
                      )
                    | (
                        "**" + .value.title + "**: \n" + 
                        .value.description + "\n\n" + 
                        "‚ùóÔ∏è Might need your attention:\n" + 
                        (.value.details.items | map("`" + (.node.snippet // "") + "`") | join("\n\n")) + "\n\n"
                      )
                  ) 
                | join("\n\n")
              ')

              if [ -z "$FAILING_AUDITS" ]; then
                FAILING_AUDITS="No failing accessibility issues detected."
              fi
            fi

            if [ -f "$HTML_REPORT_PATH" ]; then
              REPORT_LINK="${{ steps.lighthouse_audit.outputs.uploadUrl }}"
              if [ -z "$REPORT_LINK" ]; then
                REPORT_LINK="#"
              fi
          else
            FAILING_AUDITS="Lighthouse report not found."
            ACCESSIBILITY_SCORE="N/A"
            ACCESSIBILITY_COLOR="üî¥"
            REPORT_LINK="#"
          fi

          echo "formatted_audits<<EOF" >> $GITHUB_ENV
          echo "$FAILING_AUDITS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "accessibility_score=$ACCESSIBILITY_SCORE" >> $GITHUB_ENV
          echo "accessibility_color=$ACCESSIBILITY_COLOR" >> $GITHUB_ENV
          echo "report_link=$REPORT_LINK" >> $GITHUB_ENV

      - name: Add results to PR (Always Runs)
        id: results_to_pr
        if: always() # ‚úÖ Ensures the comment is posted even if a failure happens
        uses: marocchino/sticky-pull-request-comment@v2.9.0
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          number: ${{ github.event.pull_request.number }}
          header: lighthouse
          message: |
            # Lighthouse Report for this PR

            | Category         | Score |
            | ---------------- | ----- |
            | ${{ env.accessibility_color }} Accessibility | ${{ env.accessibility_score }} |

            # A11y Checks
            ${{ env.formatted_audits }}

            [Current deployment](${{ steps.wait_for_deployment.outputs.url }})
            [Full Lighthouse report](${REPORT_LINK})

      - name: Fail if Accessibility Score is below 90
        id: check_accessibility
        run: |
          echo "Current Accessibility Score: ${{ env.accessibility_score }}"
          if [ "${{ env.accessibility_score }}" -lt 90 ]; then
            echo "Accessibility score ($ACCESSIBILITY_SCORE) is below the threshold (90). Failing the job."
            exit 1
          fi
